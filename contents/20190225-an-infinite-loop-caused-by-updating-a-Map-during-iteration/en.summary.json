{
  "articleId": "an-infinite-loop-caused-by-updating-a-Map-during-iteration",
  "lang": "en",
  "hash": "e79ef8687b5ba5291871116771ecd622d0e734075bd69714cda200405486decf",
  "summaries": [
    {
      "metadata": {
        "summarizer": "azure-ai",
        "model": "DeepSeek-R1"
      },
      "summaries": [
        "The author encountered an infinite loop in a Map iteration during Simstate 2.0 development. The loop occurred when iterating a Map storing React component observers. The root cause was modifying the Map during iteration: calling an observer triggered component re-renders, which unsubscribed (deleted) and resubscribed (re-added) the same function key within the loop. Though the key (function) remained identical, reinsertion during iteration caused the Map to treat it as new, perpetuating the loop. This behavior, dangerous in most languages, arises in JavaScript when altering a Map mid-iteration. The solution involved recognizing indirection-induced complexity and avoiding such mutations during iteration."
      ],
      "startTime": "2025-02-14T13:27:35.546Z",
      "endTime": "2025-02-14T13:28:00.337Z"
    },
    {
      "metadata": {
        "summarizer": "ollama",
        "model": "deepseek-r1:7b"
      },
      "summaries": [
        "The bug occurs because the forEach loop on the `observers` Map in the Store consumer iterates while the Map is being modified by its own callbacks (during render). This leads to inconsistent states and an infinite loop. The solution is to create a separate array of observer functions before iteration, ensuring they are not modified during iteration.\n\nStep-by-step explanation:\n\n1. **Problem Identification**: Infinite loop occurs during Map iteration when observers are dynamically added and removed.\n2. **Root Cause**: Iterating over a Map while it's being modified by its own callbacks causes inconsistent states.\n3. **Solution**: Use an array of observer functions instead of iterating directly over the Map to prevent callback interference.\n\nHere's how to fix the code:\n\n- In `StoreConsumer`, create an array of observers before iteration and iterate over this array.\n\nFixed code example for Store.ts:\n```ts\n订阅函数时，避免在迭代期间修改Map：\nfunction a() { console.log(\"a\"); }\n\nmap.set(a, \"123\");\nconst observerList = Array.from(map); // 转换为数组以防止动态变化\n\nobserverList.forEach((value) => key());\n```\n\nBy creating an array copy of the Map's observers, we prevent dynamic modifications during iteration."
      ]
    }
  ]
}