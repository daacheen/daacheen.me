{
  "articleId": "summary-of-my-first-real-project",
  "lang": "cn",
  "hash": "b10102d93832aca54dda1cbcc97469c653e79d3f74dd3118e6b8f4e3dcc62095",
  "summaries": [
    {
      "metadata": {
        "summarizer": "azure-ai",
        "model": "DeepSeek-R1"
      },
      "summaries": [
        "作者独立开发并维护了第三届全国高校数据驱动创新研究大赛后台系统，采用TypeScript全栈技术，包含Next.js、fastify、MySQL等技术栈，通过Docker容器化部署。项目经历多次重构，如迁移至Next.js实现SSR、响应式改造及引入Prometheus/Loki/Grafana监控系统。创新设计前后端共享API定义机制，统一生成接口规范与验证逻辑。总结中强调记录日志与数据的重要性，并反思了生产环境文件丢失事故的教训。项目虽为常规CRUD系统，但完整实践了开发到运维的全流程，积累了真实项目经验。"
      ],
      "startTime": "2025-02-14T13:40:08.231Z",
      "endTime": "2025-02-14T13:40:48.506Z"
    },
    {
      "metadata": {
        "summarizer": "ollama",
        "model": "deepseek-r1:7b"
      },
      "summaries": [
        "在这段时间的项目中，我经历了一系列开发和部署过程，从中学习了宝贵的经验和教训。以下是我的总结：\n\n### 1. **项目总体回顾**\n   - **规模与用户量**：项目的规模较小，仅约12,000行代码左右，并未涉及复杂的优行功能。\n   - **开发流程**：通过本地开发、测试并直接部署到生产环境，跳过了预生环境的步骤。\n\n### 2. **关键错误与改进**\n   - **CI/CD缺失**：未实施CI/CD流程，导致每次部署均需手动启动服务，增加了维护复杂性。\n     - **改进措施**：计划在后续项目中引入CI/CD，加速部署周期并确保测试覆盖。\n   - **预生环境缺失**：缺乏对生产环境的模拟测试环境，未能在开发阶段验证代码的稳定性。\n     - **改进措施**：在未来项目中建立预生环境，使用历史数据测试新代码。\n   - **服务更新中断问题**：未实施graceful shutdown策略，导致服务在响应中断时可能运行不完全。\n     - **改进措施**：研究并应用graceful shutdown策略，确保服务在故障恢复时能继续正常运行。\n\n### 3. **前端测试**\n   - 缺乏针对复杂业务操作的前端测试，增加了维护难度。\n     - **改进措施**：计划为复杂业务操作编写详细测试用例，提高代码质量。\n\n### 4. **学习与反思**\n   - **CI/CD的重要性**：通过手动部署的繁琐过程深刻认识到CI/CD流程的价值。\n   - **预生环境的价值**：预生环境能有效降低生产事故风险，加速项目稳定上线。\n   - **服务恢复策略**：graceful shutdown是避免一半服务运行的问题的有效方法。\n\n### 5. **未来计划**\n   - **提升测试覆盖率**：增加前端测试，确保代码和UI行为的稳定性。\n   - **团队协作与领导能力**：希望带领团队或参与更大项目，锻炼架构设计能力和项目管理技能。\n\n通过这次项目，我不仅掌握了基本的开发流程，还深刻体会到测试、部署和维护的重要性。未来将专注于复杂架构项目的实践，提升综合能力和项目管理水平。"
      ]
    }
  ]
}