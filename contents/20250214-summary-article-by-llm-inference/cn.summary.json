{
  "articleId": "summary-article-by-llm-inference",
  "lang": "cn",
  "hash": "85c6edcc02b719c8ad5713c671bb50898b02ed4abfc5397cabeedbea1a318137",
  "summaries": [
    {
      "metadata": {
        "summarizer": "azure-ai",
        "model": "DeepSeek-R1"
      },
      "summaries": [
        "作者去年使用Azure AI语言服务生成文章摘要，但中文效果差，总结生硬。近期尝试在Azure AI平台部署深度求索的DeepSeek R1模型，通过设计Prompt成功获得流畅精准的中英文摘要。同时测试本地运行的DeepSeek R1 7B模型，虽效果稍逊但基本可用。实践表明大模型显著提升摘要质量，且云端部署流程简便。此次开发体验让作者理解到LLM应用与传统编程的差异，Prompt工程成为关键环节，并意识到AI技术已切实改变开发模式。"
      ]
    },
    {
      "metadata": {
        "summarizer": "ollama",
        "model": "deepseek-r1:7b"
      },
      "summaries": [
        "在这次使用大模型进行LLM开发的经历中，我深刻体会到了AI时代到来的浪潮以及它对软件开发方式的根本性改变。以下是这次经历的主要收获和感悟：\n\n### 1. **LLM开发流程的独特性**\n   - **选择模型**：我尝试了不同的大模型版本（如R1-7B），发现虽然性能有所提升，但在实际应用中，对于普通任务来说，当前的模型仍然能够满足基本需求。\n   - **部署模型**：将LLMAPI集成到应用程序中，实现了与AI交互的基本功能。这让我认识到模型部署的重要性以及如何将AI工具转化为可操作的功能模块。\n\n### 2. **Prompt的作用**\n   - 在LLM开发中，最核心的挑战在于设计合适的Prompt。一个好的Prompt不仅能够引导模型输出符合预期的结果，还能通过多次迭代优化其性能。\n   - **经验教训**：初次使用时，默认设置下的结果往往不够理想，需要反复调整和测试才能达到满意的效果。\n\n### 3. **LLM开发对软件工程的影响**\n   - 传统软件工程强调明确的需求、精确的代码实现和严格的测试。而LLM开发则完全不同，需求可以通过不断试验和反馈来实现， engineer的作用主要在于提供有效的 prompts。\n   - 这种模式使得LLM应用的开发更加注重用户体验和功能调优。\n\n### 4. **AI工程师的角色与价值**\n   - AI工程师不再是传统的代码编写者，而是Prompt设计专家。他们需要深入理解业务需求，并将其转化为能够有效引导模型输出的结果的自然语言输入。\n   - 这种角色转变让我意识到，AI工程师的价值不仅在于编写代码，更在于优化模型性能和提升应用效果。\n\n### 5. **对未来的展望**\n   - AI时代正在到来，我希望能够在更多领域看到AI的应用。无论是编程、开发工具还是日常工作中，AI都有很大的潜力。\n   - 在未来的学习和工作中，我计划深入了解如何利用LLM进行更复杂的任务设计，并尝试将这些技能应用到实际项目中。\n\n这次LLM开发的经历让我深刻认识到，AI不仅仅是技术的变化，更是整个软件开发流程的根本转变。通过与大模型的互动，我对AI的应用有了全新的认识，并对未来充满期待。"
      ]
    }
  ]
}