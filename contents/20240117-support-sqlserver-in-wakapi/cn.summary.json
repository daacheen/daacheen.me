{
  "articleId": "support-sqlserver-in-wakapi",
  "lang": "cn",
  "hash": "2894ee61840e2353f94fdd29fb81283beca5354b54bd7435b9453fdffcf7c88e",
  "summaries": [
    {
      "metadata": {
        "summarizer": "azure-ai",
        "model": "DeepSeek-R1"
      },
      "summaries": [
        "作者在尝试将Wakapi项目迁移至SQL Server时，遇到一系列数据库适配问题。包括SQL语法差异、ORM框架配置、外键约束冲突及GORM库的Upsert功能缺陷。通过修改原生SQL语句、动态调整时间字段类型映射、重构外键关系、手动处理唯一索引冲突，最终解决兼容性问题并成功合并代码。此次实践深入了解了SQL Server特性与GORM内部机制，验证了通过实际项目攻坚学习技术的有效性。"
      ],
      "startTime": "2025-02-14T13:43:38.671Z",
      "endTime": "2025-02-14T13:44:02.939Z"
    },
    {
      "metadata": {
        "summarizer": "ollama",
        "model": "deepseek-r1:8b"
      },
      "summaries": [
        "在解决这个问题时，我逐步发现了许多关于 SQL Server 和 GORM 的细节，并通过手动处理重复插入的问题，最终完成了任务。尽管遇到了一些挑战，但过程让我对 Go 语言和开源项目贡献有了更深的理解。\n\n**主要步骤：**\n\n1. **问题识别**：在尝试使用 GORM 插入数据时，遇到了重复主键错误。\n2. **调试与分析**：通过调试工具追踪到 GORM 的 SQL Server 适配器，发现了可能的 bug。\n3. **手动处理**：在没有修复适配器的情况下，选择手动逐个插入数据，跳过重复的记录。\n4. **学习与反思**：深入了解了 Go 语言的明确性和错误处理机制，同时也认识到 SQL Server 的特性。\n\n通过这次经历，我不仅解决了问题，还提升了对开发工具和开源项目贡献的理解。最终，我的Pull Request得到了合并，这让我感到成就感和满足。\n\n**结果：**\n\n- **问题解决**：成功将数据插入 SQL Server，无重复记录错误。\n- **技能提升**：加深了对 Go 语言和 GORM 的理解，掌握了调试技巧。\n- **贡献体验**：第一次在大型开源项目中参与问题解决，增强了解决问题的信心。\n\n这次经历让我更加明确地认识到学习的重要性，不管是技术上的还是工具使用方面，都需要持续探索和实践。"
      ]
    }
  ]
}