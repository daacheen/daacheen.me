{
  "articleId": "typed-i18n-with-template-literal-types",
  "lang": "cn",
  "hash": "519c70303191398d9fe44ecf59cc53d769b9aad1c0e1a233cca1a9c60f0a5e4b",
  "summaries": [
    {
      "metadata": {
        "summarizer": "azure-ai",
        "model": "DeepSeek-R1"
      },
      "summaries": [
        "文章介绍作者利用TypeScript模板字面量类型开发了i18n库react-typed-i18n，通过类型推导生成强类型文本ID，解决传统方案字符串易错问题。该库以树形结构组织多语言文本，运用递归类型计算所有合法ID路径，实现编译时类型校验与编辑器自动补全。同时提供前缀函数优化长ID使用，相比前代Proxy方案无运行时开销。新库支持React Context和测试覆盖，已在个人博客中实践验证性能与开发体验的平衡。"
      ],
      "startTime": "2025-02-14T13:39:18.765Z",
      "endTime": "2025-02-14T13:39:43.772Z"
    },
    {
      "metadata": {
        "summarizer": "ollama",
        "model": "deepseek-r1:8b"
      },
      "summaries": [
        "## 递归类型与i18n：利用TypeScript实现国际化路径的安全处理\n\n在React项目中进行国际化（i18n）是开发过程中的常见需求。然而，确保在代码中正确引用翻译键并保持类型安全性是一个挑战。TypeScript提供了强大的类型系统，可以通过定义递归类型来构建复杂的路径结构，从而实现国际化功能的高效与安全。\n\n### 递归类型的引入\n\n我们从一个简单的对象开始：\n\n```typescript\ninterface Lang {\n  login: {\n    button: {\n      text: string;\n    };\n  };\n}\n```\n\n这个接口定义了一个层级结构，其中每个路径如`login.button.text`都被明确地嵌套。利用TypeScript的交汇类型，我们可以递归地定义翻译键的路径：\n\n```typescript\ntype LangPath = keyof ILang;\n// 或者更具体地：\ntype ButtonText = 'Login';\n```\n\n### 处理层级结构\n\n为了处理复杂的层级结构，使用递归类型来定义每个节点的可能值。例如，可以通过`Lang`接口为每个子路径指定字符串或其他对象：\n\n```typescript\ntype Translations = {\n  login: {\n    button: {\n      text: string;\n    };\n  };\n};\n```\n\n这样，当我们访问`translation.login.button.text`时，TypeScript可以检查该路径是否存在，并在错误时抛出友好的错误。\n\n### 前缀提取与复杂键处理\n\n在实际应用中，我们可能需要处理更长的路径。例如：\n\n```typescript\ninterface Translations {\n  user: {\n    profile: {\n      settings: {\n        preferences: string;\n      };\n    };\n  };\n}\n```\n\n为了提取前缀，如`user.profile.settings`，我们可以编写一个函数，该函数接受一个全局键并返回对应的子键。这涉及递归地解构路径，并利用TypeScript进行类型推导。\n\n### 性能与可读性的平衡\n\n使用递归类型虽然提供了强大的检查能力，但也可能导致代码复杂度增加。为了保持性能和可读性，我们需要确保类型定义简洁且易于维护。这可以通过合理的层级划分和避免过度嵌套来实现。\n\n### 结论\n\nTypeScript的递归类型为国际化路径提供了强大的支持，使得翻译键的引用和管理更加安全。通过逐步构建层级结构，我们可以在不牺牲代码可读性的前提下，实现复杂的国际化需求。此外，TypeScript的类型检查能够帮助我们发现错误并提升开发效率。这一方法展示了TypeScript在处理动态语言和复杂结构方面的强大能力，对于任何涉及递归路径的项目都是非常有用的。"
      ]
    }
  ]
}