{
  "articleId": "department-gitlab-ci-configuration",
  "lang": "cn",
  "hash": "e0e38c47f17de8752d630e0e96e3299462970aec6f586204750c4c7795fa2337",
  "summaries": [
    {
      "metadata": {
        "summarizer": "azure-ai",
        "model": "DeepSeek-R1"
      },
      "summaries": [
        "作者因学院GitLab版本过旧（8.10），无法使用新版GitLab Runner，通过降级安装1.9.5版本Runner并注册解决API兼容性问题。配置过程中遭遇Ubuntu官方源Node.js版本过低，手动更新源解决；构建时内存不足导致进程崩溃，将内存扩容至2G并通过简化测试项目完成部署。最终成功搭建CI环境，实现自动化构建，并为项目添加构建状态徽章。文章总结了GitLab CI与传统开源平台的优势，强调其与GitLab生态的无缝衔接，为后续项目持续集成奠定基础。"
      ],
      "startTime": "2025-02-14T13:22:15.824Z",
      "endTime": "2025-02-14T13:22:35.522Z"
    },
    {
      "metadata": {
        "summarizer": "ollama",
        "model": "deepseek-r1:8b"
      },
      "summaries": [
        "这篇文章讲述了作者在搭建GitLab持续集成（CI）环境时遇到的各种问题及解决过程。作者主要描述了以下几个关键点：\n\n1. **GitLab版本过旧**：院的GitLab版本较旧，无法直接使用最新版本的Runner，只能依赖老版本的兼容性配置。\n2. **Node版本不足**：在构建前端项目时，发现节点版本过低，需要自行设置适当的apt源来升级Node版本。\n3. **内存不足提示**：在运行npm install时，因服务器内存不足导致进程被终止，最终通过增加内存空间解决了问题。\n4. **工具选择简化流程**：为了简化开发流程，作者选择使用Mobx官方的boilderplate项目作为测试用例。\n\n作者最终成功配置了CI环境，并在README.md中添加了badges，使项目看起来更加专业。结语部分强调了GitLab CI的便利性，但搭建过程中的各种坑点也提醒用户需要注意兼容性、依赖管理及资源分配等问题。"
      ]
    }
  ]
}